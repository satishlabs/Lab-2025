package com.satishlabs.util;
import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class DataMaskingUtils {
    public static Object maskData(Object data) {
        if (data == null) {
            return null;
        }
        
        try {
            // Create a deep copy of the data
            Object tempData = deepCopy(data);
            boolean isString = tempData instanceof String;

            if (tempData instanceof Map) {
                replaceNullValues((Map<?, ?>) tempData);
            }

            String result = isString ? (String) tempData : serializeToJson(tempData);
            result = applyMasking(result);
            
            return isString ? result : deserializeFromJson(result);
        } catch (Exception e) {
            return data;
        }
    }

    private static String applyMasking(String data) {
        // Regex patterns
        String cardNumberRegexWithQuote = "(cardId|cardnum|cardNumber|cardnumber|proxyValue|account|pan|accountNumber|barcodeValue)(\"?)(=|:)(\"?)(\\d{6})(\\d{6})(\\d{4})";
        String cardNumberRegexNoQuote = "(cardId|cardnum|cardNumber|cardnumber|proxyValue|account|pan|accountNumber|barcodeValue)(\"?)(=|:)(\\d{6})(\\d{6})(\\d{4})";
        String securityCodeRegexWithQuote = "(securityCode|cvx|cvx2|cvv|redemptionPin)(\"?)(=|:)(\"?)(\\d{3})";
        String securityCodeRegexNoQuote = "(securityCode|cvx|cvx2|cvv|redemptionPin)(\"?)(=|:)(\\d{3})";
        String pinRegexWithQuote = "(pin|newPin)(\"?)(=|:)(\"?)(\\d{1,4})";
        String pinRegexNoQuote = "(pin|newPin)(\"?)(=|:)(\\d{1,4})";
        String accountNumberRegexWithQuote = "(accountNum|productCode)(\"?)(=|:)(\"?)(\\d{1,12})(\\d{4})";
        String accountNumberRegexNoQuote = "(accountNum|productCode)(\"?)(=|:)(\\d{1,12})(\\d{4})";
        String pwdRegex = "(pwd=)(.*?)(&)";
        String phoneNumberRegex = "^[0-9]{1,2}[-. ]?\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$";
        String maskExpectFirst2CharRegexWithQuote = "(name|displayName|title|middleName|firstName|lastName)(\"?)(=|:)(\")(..)([^\\\"]*)";
        String maskExpectFirst2CharRegexNoQuote = "(name|displayName|title|middleName|firstName|lastName)(\"?)(=|:)(..)([^\\\"]*)";
        String maskClientSecrets = "(client_id|client_secret)(\"?)(=|:)\"?([a-zA-Z0-9\\s-]*)([?\\\"]*)";
        //String maskExpectFirst3CharRegexWithQuote = "(gender|addressLine1|addressLine2|addressLine3|city|countyOrDistrict|stateOrProvince|birthDate|postalCode|phoneNumber)(\"?)(=|:)(\")(....)([^\\\"]*)";
       // String maskExpectFirst3CharRegexNoQuote = "(gender|addressLine1|addressLine2|addressLine3|city|countyOrDistrict|stateOrProvince|birthDate|postalCode|phoneNumber)(\"?)(=|:)(..)([^\\\"]*)";
        String emailRegex = "(emailAddress|email)(\"?)(=|:)\"?([a-zA-Z0-9._%+-]{2})([a-zA-Z0-9._%+-]*)(@\\w+([.-]?\\w+)*(\\.\\w{2,}))";
        
        // Replacement strings
        String cardNumberReplacementWithQuote = "$1$2$3$4$5XXXXXXX$7";
        String cardNumberReplacementNoQuote = "$1$2$3\"$4XXXXXXX$6\"";
        String securityCodeReplacementWithQuote = "$1$2$3$4XXX";
        String securityCodeReplacementNoQuote = "$1$2$3\"XXX\"";
        String pinReplacementWithQuote = "$1$2$3$4XXXX";
        String pinReplacementNoQuote = "$1$2$3\"XXXX\"";
        String accountNumberReplacementWithQuote = "$1$2$3$4XXXXXXXX$6";
        String accountNumberReplacementNoQuote = "$1$2$3\"XXXXXXXX$5\"";
        String pwdReplacement = "$1XXXXXXX$3";
        String phoneNumberReplacement = "XXX XXX $1";
        String maskExpectFirst3CharReplacementWithQuote = "$1$2$3$4$5XXXXXXX";
        String maskExpectFirst3CharReplacementNoQuote = "$1$2$3\"$4XXXXXXX\"";
        String maskExpectFirst2CharRegexReplacementWithQuote = "$1$2$3$4$5XXX";
        String maskExpectFirst2CharRegexReplacementNoQuote = "$1$2$3$4$5XXX";
        String emailRegexReplacement = "$1$2$3$4*****$6";
        String maskClientSecretsRegexReplacement = "$1$2$3$4XXXXXXX$6";
        
        // Apply regex replacements
        data = data.replaceAll(cardNumberRegexWithQuote, cardNumberReplacementWithQuote);
        data = data.replaceAll(cardNumberRegexNoQuote, cardNumberReplacementNoQuote);
        data = data.replaceAll(securityCodeRegexWithQuote, securityCodeReplacementWithQuote);
        data = data.replaceAll(securityCodeRegexNoQuote, securityCodeReplacementNoQuote);
        data = data.replaceAll(pinRegexWithQuote, pinReplacementWithQuote);
        data = data.replaceAll(pinRegexNoQuote, pinReplacementNoQuote);
        data = data.replaceAll(accountNumberRegexWithQuote, accountNumberReplacementWithQuote);
        data = data.replaceAll(accountNumberRegexNoQuote, accountNumberReplacementNoQuote);
        data = data.replaceAll(pwdRegex, pwdReplacement);
        data = data.replaceAll(phoneNumberRegex, phoneNumberReplacement);
       // data = data.replaceAll(maskExpectFirst3CharRegexWithQuote, maskExpectFirst3CharReplacementWithQuote);
       // data = data.replaceAll(maskExpectFirst3CharRegexNoQuote, maskExpectFirst3CharReplacementNoQuote);
        data = data.replaceAll(maskExpectFirst2CharRegexWithQuote, maskExpectFirst2CharRegexReplacementWithQuote);
        data = data.replaceAll(maskExpectFirst2CharRegexNoQuote, maskExpectFirst2CharRegexReplacementNoQuote);
        data = data.replaceAll(emailRegex, emailRegexReplacement);
        data = data.replaceAll(maskClientSecrets, maskClientSecretsRegexReplacement);

        return data;
    }

    private static void replaceNullValues(Map<?, ?> obj) {
        for (Map.Entry<?, ?> entry : obj.entrySet()) {
            if (entry.getValue() == null) {
                // Create a mutable map to set the new value
                Map<Object, Object> mutableMap = (Map<Object, Object>) obj;
                mutableMap.put(entry.getKey(), "null");
            } else if (entry.getValue() instanceof Map) {
                replaceNullValues((Map<?, ?>) entry.getValue());
            }
        }
    }

    private static Object deepCopy(Object obj) {
        // Use a serialization library or a custom method to create a deep copy
        // This is a placeholder; you may implement this as per your requirements
        return obj;  // Replace with actual deep copy logic
    }

   private static String serializeToJson(Object obj) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            return objectMapper.writeValueAsString(obj);
        } catch (JsonProcessingException e) {
            return "";
        }
    }

    private static Object deserializeFromJson(String json) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            return objectMapper.readValue(json, Map.class); // Or your desired type
        } catch (IOException e) {
            return new Object(); // Adjust to your requirements
        }
    }
}