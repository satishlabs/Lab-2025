package com.satishlabs.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Map;

public final class DataMaskingUtils {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    private DataMaskingUtils() {}

    public static Object maskData(Object data) {
        if (data == null) {
            return null;
        }

        try {
            Object tempData = deepCopy(data);
            boolean isString = tempData instanceof String;

            if (tempData instanceof Map<?, ?> map) {
                replaceNullValues(map);
            }

            String result = isString ? (String) tempData : serializeToJson(tempData);
            result = applyMasking(result);

            return isString ? result : deserializeFromJson(result);
        } catch (Exception e) {
            return data; // Fallback to raw data if masking fails
        }
    }

    private static String applyMasking(String data) {
        if (data == null) return "";

        // --- Add your regex replacements (same as before) ---
        String cardNumberRegexWithQuote = "(cardId|cardnum|cardNumber|cardnumber|proxyValue|account|pan|accountNumber|barcodeValue)(\"?)(=|:)(\"?)(\\d{6})(\\d{6})(\\d{4})";
        String cardNumberReplacementWithQuote = "$1$2$3$4$5XXXXXXX$7";

        data = data.replaceAll(cardNumberRegexWithQuote, cardNumberReplacementWithQuote);

        // TODO: Keep your other regex replacements here (unchanged)

        return data;
    }

    private static void replaceNullValues(Map<String, Object> obj) {
        obj.replaceAll((k, v) -> v == null ? "null" : v);
    }

    private static Object deepCopy(Object obj) {
        // Use proper library later (e.g. Apache Commons or custom clone)
        throw new UnsupportedOperationException("Deep copy not implemented. Please implement based on your needs.");
    }

    private static String serializeToJson(Object obj) {
        try {
            return objectMapper.writeValueAsString(obj);
        } catch (JsonProcessingException e) {
            return "";
        }
    }

    private static Object deserializeFromJson(String json) {
        try {
            return objectMapper.readValue(json, Map.class);
        } catch (IOException e) {
            return new Object();
        }
    }
}
