package com.satishlabs.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import jakarta.servlet.http.HttpServletRequest;
import java.time.LocalDateTime;
import java.util.stream.Collectors;

@ControllerAdvice
public class GlobalExceptionHandler {

    private ErrorResponse buildErrorResponse(Exception ex, HttpStatus status, HttpServletRequest request, String customMessage) {
        return new ErrorResponse(
                LocalDateTime.now(),
                status.value(),
                status.getReasonPhrase(),
                customMessage != null ? customMessage : ex.getMessage()
        );
    }

    // ✅ Generic Exception
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleException(Exception ex, HttpServletRequest request) {
        return new ResponseEntity<>(
                buildErrorResponse(ex, HttpStatus.INTERNAL_SERVER_ERROR, request, "Something went wrong"),
                HttpStatus.INTERNAL_SERVER_ERROR
        );
    }

    // ✅ Bad Credentials
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<ErrorResponse> handleBadCredentials(BadCredentialsException ex, HttpServletRequest request) {
        return new ResponseEntity<>(
                buildErrorResponse(ex, HttpStatus.UNAUTHORIZED, request, "Invalid username or password"),
                HttpStatus.UNAUTHORIZED
        );
    }

    // ✅ Validation Errors
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleValidationErrors(MethodArgumentNotValidException ex, HttpServletRequest request) {
        String errors = ex.getBindingResult().getFieldErrors()
                .stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.joining(", "));

        return new ResponseEntity<>(
                buildErrorResponse(ex, HttpStatus.BAD_REQUEST, request, errors),
                HttpStatus.BAD_REQUEST
        );
    }

    // ✅ Custom Resource Not Found
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleResourceNotFound(ResourceNotFoundException ex, HttpServletRequest request) {
        return new ResponseEntity<>(
                buildErrorResponse(ex, HttpStatus.NOT_FOUND, request, ex.getMessage()),
                HttpStatus.NOT_FOUND
        );
    }
}
