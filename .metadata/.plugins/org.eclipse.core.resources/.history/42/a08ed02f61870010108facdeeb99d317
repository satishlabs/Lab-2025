package com.satishlabs.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.satishlabs.dto.AuthRequest;
import com.satishlabs.dto.AuthResponse;
import com.satishlabs.dto.RegisterRequest;
import com.satishlabs.dto.UserResponseDto;
import com.satishlabs.service.AuthService;
import com.satishlabs.util.TraceUtil;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

	private final AuthService authService;
	private final UserRepository userRepository;
	private final UserMapper userMapper;

	public AuthController(AuthService authService, UserRepository userRepository,UserMapper userMapper) {
		this.authService = authService;
		this.userRepository = userRepository;
		this.userMapper = userMapper;
	}

	/**
	 * Register a new user with optional avatar upload
	 */
	@PostMapping("/register")
	public ResponseEntity<String> register(@RequestPart("user") RegisterRequest request,
			@RequestPart(value = "avatar", required = false) MultipartFile avatar) {
		return ResponseEntity.ok(authService.register(request, avatar));
	}

	/**
	 * Login API
	 */
	@PostMapping("/login")
	public ResponseEntity<AuthResponse> login(@RequestBody AuthRequest request) {
		String token = authService.login(request);
		return ResponseEntity.ok(new AuthResponse(token));
	}

	/**
	 * Logout API - usually handled by client just by deleting token, but you can
	 * implement blacklist if needed.
	 */
	@PostMapping("/logout")
	public ResponseEntity<String> logout(Authentication authentication) {
		// You can implement token blacklist here if required
		String username = authentication.getName();
		return ResponseEntity.ok("User " + username + " logged out successfully");
	}

	/**
	 * Get logged-in user profile
	 */
	@GetMapping("/profile")
	public ResponseEntity<UserResponseDto> profile(Authentication authentication) {
		String traceId = TraceUtil.getCurrentTraceId();
		System.out.println("TraceId for request: " + traceId);
		return ResponseEntity.ok(authService.getProfile(authentication.getName()));
	}

	/**
	 * Upload/Update user avatar
	 */
	@PostMapping("/upload-avatar")
	public ResponseEntity<String> uploadAvatar(@RequestParam("file") MultipartFile file,
			Authentication authentication) {
		String username = authentication.getName();
		// Call service to handle file save and update user avatar path
		return ResponseEntity.ok("Avatar uploaded successfully for user: " + username);
	}
}