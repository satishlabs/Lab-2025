package com.satishlabs.service;

import com.example.model.Role;
import com.example.model.User;
import com.example.repository.RoleRepository;
import com.example.repository.UserRepository;
import com.example.security.JwtTokenUtil;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
public class AuthService {

	private final UserRepository userRepository;
	private final RoleRepository roleRepository;
	private final PasswordEncoder passwordEncoder;
	private final JwtTokenUtil jwtTokenUtil;
	private final AuthenticationManager authenticationManager;

	public AuthService(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder,
			JwtTokenUtil jwtTokenUtil, AuthenticationManager authenticationManager) {
		this.userRepository = userRepository;
		this.roleRepository = roleRepository;
		this.passwordEncoder = passwordEncoder;
		this.jwtTokenUtil = jwtTokenUtil;
		this.authenticationManager = authenticationManager;
	}

	public String register(String username, String password) {
		if (userRepository.existsByUsername(username)) {
			throw new RuntimeException("Username already exists");
		}
		Role userRole = roleRepository.findByName("USER")
				.orElseGet(() -> roleRepository.save(Role.builder().name("USER").build()));
		User user = User.builder().username(username).password(passwordEncoder.encode(password))
				.roles(Collections.singleton(userRole)).build();
		userRepository.save(user);
		return "User registered successfully";
	}

	public String login(String username, String password) {
		authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		return jwtTokenUtil.generateToken(username);
	}
}
